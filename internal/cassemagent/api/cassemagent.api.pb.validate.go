// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cassemagent.api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetConfigReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 3 || l > 30 {
		return GetConfigReqValidationError{
			field:  "App",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 3 || l > 30 {
		return GetConfigReqValidationError{
			field:  "Env",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := len(m.GetKeys()); l < 1 || l > 100 {
		return GetConfigReqValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_GetConfigReq_Keys_Unique := make(map[string]struct{}, len(m.GetKeys()))

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if _, exists := _GetConfigReq_Keys_Unique[item]; exists {
			return GetConfigReqValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_GetConfigReq_Keys_Unique[item] = struct{}{}
		}

		// no validation rules for Keys[idx]
	}

	return nil
}

// GetConfigReqValidationError is the validation error returned by
// GetConfigReq.Validate if the designated constraints aren't met.
type GetConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigReqValidationError) ErrorName() string { return "GetConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigReqValidationError{}

// Validate checks the field values on GetConfigResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetConfigResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetElems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConfigRespValidationError{
					field:  fmt.Sprintf("Elems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetConfigRespValidationError is the validation error returned by
// GetConfigResp.Validate if the designated constraints aren't met.
type GetConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigRespValidationError) ErrorName() string { return "GetConfigRespValidationError" }

// Error satisfies the builtin error interface
func (e GetConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigRespValidationError{}

// Validate checks the field values on UnregisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnregisterReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 5 || l > 64 {
		return UnregisterReqValidationError{
			field:  "ClientId",
			reason: "value length must be between 5 and 64 runes, inclusive",
		}
	}

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		return UnregisterReqValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 3 || l > 30 {
		return UnregisterReqValidationError{
			field:  "App",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 3 || l > 30 {
		return UnregisterReqValidationError{
			field:  "Env",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	return nil
}

// UnregisterReqValidationError is the validation error returned by
// UnregisterReq.Validate if the designated constraints aren't met.
type UnregisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterReqValidationError) ErrorName() string { return "UnregisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UnregisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterReqValidationError{}

// Validate checks the field values on RenewReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RenewReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 5 || l > 64 {
		return RenewReqValidationError{
			field:  "ClientId",
			reason: "value length must be between 5 and 64 runes, inclusive",
		}
	}

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		return RenewReqValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 3 || l > 30 {
		return RenewReqValidationError{
			field:  "App",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 3 || l > 30 {
		return RenewReqValidationError{
			field:  "Env",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := len(m.GetWatchingKeys()); l < 1 || l > 100 {
		return RenewReqValidationError{
			field:  "WatchingKeys",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_RenewReq_WatchingKeys_Unique := make(map[string]struct{}, len(m.GetWatchingKeys()))

	for idx, item := range m.GetWatchingKeys() {
		_, _ = idx, item

		if _, exists := _RenewReq_WatchingKeys_Unique[item]; exists {
			return RenewReqValidationError{
				field:  fmt.Sprintf("WatchingKeys[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RenewReq_WatchingKeys_Unique[item] = struct{}{}
		}

		// no validation rules for WatchingKeys[idx]
	}

	return nil
}

// RenewReqValidationError is the validation error returned by
// RenewReq.Validate if the designated constraints aren't met.
type RenewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewReqValidationError) ErrorName() string { return "RenewReqValidationError" }

// Error satisfies the builtin error interface
func (e RenewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewReqValidationError{}

// Validate checks the field values on EmptyResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EmptyResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyRespValidationError is the validation error returned by
// EmptyResp.Validate if the designated constraints aren't met.
type EmptyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyRespValidationError) ErrorName() string { return "EmptyRespValidationError" }

// Error satisfies the builtin error interface
func (e EmptyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyRespValidationError{}

// Validate checks the field values on RegAndWaitReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegAndWaitReq) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 3 || l > 30 {
		return RegAndWaitReqValidationError{
			field:  "App",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetEnv()); l < 3 || l > 30 {
		return RegAndWaitReqValidationError{
			field:  "Env",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
	}

	if l := len(m.GetWatchingKeys()); l < 1 || l > 100 {
		return RegAndWaitReqValidationError{
			field:  "WatchingKeys",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	_RegAndWaitReq_WatchingKeys_Unique := make(map[string]struct{}, len(m.GetWatchingKeys()))

	for idx, item := range m.GetWatchingKeys() {
		_, _ = idx, item

		if _, exists := _RegAndWaitReq_WatchingKeys_Unique[item]; exists {
			return RegAndWaitReqValidationError{
				field:  fmt.Sprintf("WatchingKeys[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RegAndWaitReq_WatchingKeys_Unique[item] = struct{}{}
		}

		// no validation rules for WatchingKeys[idx]
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 5 || l > 64 {
		return RegAndWaitReqValidationError{
			field:  "ClientId",
			reason: "value length must be between 5 and 64 runes, inclusive",
		}
	}

	if ip := net.ParseIP(m.GetClientIp()); ip == nil {
		return RegAndWaitReqValidationError{
			field:  "ClientIp",
			reason: "value must be a valid IP address",
		}
	}

	return nil
}

// RegAndWaitReqValidationError is the validation error returned by
// RegAndWaitReq.Validate if the designated constraints aren't met.
type RegAndWaitReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegAndWaitReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegAndWaitReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegAndWaitReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegAndWaitReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegAndWaitReqValidationError) ErrorName() string { return "RegAndWaitReqValidationError" }

// Error satisfies the builtin error interface
func (e RegAndWaitReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegAndWaitReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegAndWaitReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegAndWaitReqValidationError{}

// Validate checks the field values on WaitResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *WaitResp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetElem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaitRespValidationError{
				field:  "Elem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WaitRespValidationError is the validation error returned by
// WaitResp.Validate if the designated constraints aren't met.
type WaitRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitRespValidationError) ErrorName() string { return "WaitRespValidationError" }

// Error satisfies the builtin error interface
func (e WaitRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitRespValidationError{}

// Validate checks the field values on DispatchReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DispatchReq) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetElems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DispatchReqValidationError{
					field:  fmt.Sprintf("Elems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DispatchReqValidationError is the validation error returned by
// DispatchReq.Validate if the designated constraints aren't met.
type DispatchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchReqValidationError) ErrorName() string { return "DispatchReqValidationError" }

// Error satisfies the builtin error interface
func (e DispatchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchReqValidationError{}

// Validate checks the field values on DispatchResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DispatchResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DispatchRespValidationError is the validation error returned by
// DispatchResp.Validate if the designated constraints aren't met.
type DispatchRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DispatchRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DispatchRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DispatchRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DispatchRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DispatchRespValidationError) ErrorName() string { return "DispatchRespValidationError" }

// Error satisfies the builtin error interface
func (e DispatchRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDispatchResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DispatchRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DispatchRespValidationError{}
