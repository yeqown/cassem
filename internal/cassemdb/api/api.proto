syntax = "proto3";

package cassem.db;
option go_package = "api";

import "envoyproxy-validate/validate.proto";

enum EntityType {
  UNKNOWN = 0;
  ELT     = 1; // element
  DIR     = 2; // directory
}

message Entity {
  string     fingerprint = 1;
  string     key         = 2;
  bytes      val         = 3;
  int64      createdAt   = 4;
  int64      updatedAt   = 5;
  int32      ttl         = 6;
  EntityType typ         = 7;
};

message change {
  enum ChangeOp {
    Invalid = 0;
    Set     = 1;
    Unset   = 2;
  }

  ChangeOp op      = 1 [(validate.rules).enum   = {defined_only: true}];
  string   key     = 2 [(validate.rules).string = {min_len: 2, contains: "/"}];
  Entity   last    = 3;
  Entity   current = 4;
};

message empty {};

message getKVReq {
  string key = 1 [(validate.rules).string = {min_len: 2, contains: "/"}];
};

message getKVResp {
  Entity entity = 1;
};

message getKVsReq {
  repeated string keys = 1 [(validate.rules).repeated = {unique: true, min_items: 1, max_items: 100}];
};

message getKVsResp {
  repeated Entity entities = 1;
};


message setKVReq {
  string key      = 1 [(validate.rules).string = {min_len: 2, contains: "/"}];
  bool   isDir    = 2;
  uint32 ttl      = 3; // ttl is Time to Live (n seconds)
  // val's size in [1, 256K] Byte
  bytes  val       = 4 [(validate.rules).bytes = {min_len: 1, max_len: 262144}];
  bool   overwrite = 5;
};

message unsetKVReq {
  string key   = 1 [(validate.rules).string = {min_len: 2}];
  bool   isDir = 2;
};

message watchReq {
  repeated string keys = 2 [(validate.rules).repeated = {unique: true, min_items: 1, max_items: 20}];
};

message ttlReq {
  string key = 1 [(validate.rules).string = {min_len: 2, contains: "/"}];
};

message ttlResp {
  int32 ttl = 1;
}

message expireReq {
  string key = 1 [(validate.rules).string = {min_len: 2, contains: "/"}];
};

message rangeReq {
  string key   = 1 [(validate.rules).string = {min_len: 2}];
  string seek  = 2 [(validate.rules).string = {min_len: 1, ignore_empty: true}];
  int32  limit = 3 [(validate.rules).int32  = {gte: 1, lte: 100}];
};

message rangeResp {
  repeated Entity entities    = 1;
  bool            hasMore     = 2;
  string          nextSeekKey = 3;
}

service KV {
  rpc GetKV(getKVReq) returns(getKVResp) {};
  rpc GetKVs(getKVsReq) returns(getKVsResp) {};
  rpc SetKV(setKVReq) returns(empty) {};
  rpc UnsetKV(unsetKVReq) returns(empty) {};

  // Watch will rev a stream response in client.
  rpc Watch(watchReq) returns (stream change) {};

  rpc TTL(ttlReq) returns (ttlResp) {};
  rpc Expire(expireReq) returns (empty) {};
  rpc Range(rangeReq) returns (rangeResp) {};
}