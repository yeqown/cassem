syntax = "proto3";

package cassem.concept;
option go_package = "concept";

// Element represent a config element with specific version.
message Element {
  // refer ElementMetadata
  ElementMetadata metadata  = 1;
  // raw data in the version.
  bytes           raw       = 2;
  // version number start since 1.
  int32           version   = 3;
  // indicates published or not.
  bool            published = 4;
};

// ContentType enumerates all built-in content types those Element's
// raw could be.
enum ContentType {
  UNKNOWN   = 0;
  // application/json
  JSON      = 1;
  // application/toml
  TOML      = 2;
  // application/ini
  INI       = 3;
  // application/plaintext
  PLAINTEXT = 4;
}

// ElementMetadata contains metadata of one element, includes
// specific key, app, env attributes, and other fields to display
// the element's version status.
message ElementMetadata {
  string      key                = 1;
  string      app                = 2;
  string      env                = 3;
  // the latest version in all versions of the element.
  int32       latestVersion      = 4;
  // if there is any unpublished version, if there's any unpublished
  // version, the element can not create a new version util all versions have been
  // published,
  int32       unpublishedVersion = 5;
  // the in-use version.
  int32       usingVersion       = 6;
  // the using version's fingerprint.
  string      usingFingerprint   = 7;
  // indicates the content type of Element's raw data
  ContentType contentType        = 8;
}

// AppMetadata contains metadata of one app, includes specific identity, 
// description, and other fields to display the app's status.
message AppMetadata {
  enum Status {
    INUSE = 0;
    // DEPRECATED represents the app is deprecated. It can only read but update.
    DEPRECATED = 1;
  }

  string id          = 1;
  string description = 2;
  int64  createdAt   = 3;
  // creator of the app indicates the user who created the app.
  string creator     = 4;
  // owner of the app indicates the user who actually own this app.
  // of course, admin account owns all apps.
  string owner       = 5;
  Status status      = 6;
  // secrets is the key to acccecss the app's elements by different envs. If it's empty,
  // that means the app is public.
  map<string, string> secrets = 7;
}


// ElementOperation is used to indicate the operation of one element.
message ElementOperation {
  enum Op {
    INVALID = 0;
    SET     = 1;
    UNSET   = 2;
    PUBLISH = 3;
  }

  // operator indicates the user who execute the operation.
  string    operator       = 1;
  int64     operatedAt     = 2;
  string    operatedKey    = 3;
  Op op                    = 4;
  int32     lastVersion    = 5;
  int32     currentVersion = 6;
  string    remark         = 7;
}

// Instance describes client instance.
message Instance {
  message Watching {
    string          app       = 1;
    string          env       = 2;
    repeated string watchKeys = 3;
  }

  string            clientId           = 1;
  string            agentId            = 2;
  string            clientIp           = 3;
  repeated Watching watching           = 4;
  int64             lastRenewTimestamp = 5;
}

// AgentInstance describes agent node instance attributes.
message AgentInstance {
  // agentId is the unique identifier for agent.
  string agentId                  = 1;
  string addr                     = 2;
  // annotations contains the some custom label and value of AgentInstance.
  map<string, string> annotations = 3;
}

enum ChangeOp {
  UNDEFINED = 0;
  NEW       = 1;
  UPDATE    = 2;
  DELETE    = 3;
}

message AgentInstanceChange {
  AgentInstance ins = 1;
  ChangeOp      op  = 2;
}
