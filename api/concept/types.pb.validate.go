// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types.proto

package concept

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Element with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Element) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Element with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ElementMultiError, or nil if none found.
func (m *Element) ValidateAll() error {
	return m.validate(true)
}

func (m *Element) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ElementValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ElementValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ElementValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Raw

	// no validation rules for Version

	// no validation rules for Published

	if len(errors) > 0 {
		return ElementMultiError(errors)
	}
	return nil
}

// ElementMultiError is an error wrapping multiple validation errors returned
// by Element.ValidateAll() if the designated constraints aren't met.
type ElementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ElementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ElementMultiError) AllErrors() []error { return m }

// ElementValidationError is the validation error returned by Element.Validate
// if the designated constraints aren't met.
type ElementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ElementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ElementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ElementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ElementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ElementValidationError) ErrorName() string { return "ElementValidationError" }

// Error satisfies the builtin error interface
func (e ElementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sElement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ElementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ElementValidationError{}

// Validate checks the field values on ElementMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ElementMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ElementMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ElementMetadataMultiError, or nil if none found.
func (m *ElementMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ElementMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for App

	// no validation rules for Env

	// no validation rules for LatestVersion

	// no validation rules for UnpublishedVersion

	// no validation rules for UsingVersion

	// no validation rules for UsingFingerprint

	// no validation rules for ContentType

	if len(errors) > 0 {
		return ElementMetadataMultiError(errors)
	}
	return nil
}

// ElementMetadataMultiError is an error wrapping multiple validation errors
// returned by ElementMetadata.ValidateAll() if the designated constraints
// aren't met.
type ElementMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ElementMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ElementMetadataMultiError) AllErrors() []error { return m }

// ElementMetadataValidationError is the validation error returned by
// ElementMetadata.Validate if the designated constraints aren't met.
type ElementMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ElementMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ElementMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ElementMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ElementMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ElementMetadataValidationError) ErrorName() string { return "ElementMetadataValidationError" }

// Error satisfies the builtin error interface
func (e ElementMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sElementMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ElementMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ElementMetadataValidationError{}

// Validate checks the field values on AppMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppMetadataMultiError, or
// nil if none found.
func (m *AppMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *AppMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for Creator

	// no validation rules for Owner

	// no validation rules for Status

	// no validation rules for Secrets

	if len(errors) > 0 {
		return AppMetadataMultiError(errors)
	}
	return nil
}

// AppMetadataMultiError is an error wrapping multiple validation errors
// returned by AppMetadata.ValidateAll() if the designated constraints aren't met.
type AppMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMetadataMultiError) AllErrors() []error { return m }

// AppMetadataValidationError is the validation error returned by
// AppMetadata.Validate if the designated constraints aren't met.
type AppMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppMetadataValidationError) ErrorName() string { return "AppMetadataValidationError" }

// Error satisfies the builtin error interface
func (e AppMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppMetadataValidationError{}

// Validate checks the field values on ElementOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ElementOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ElementOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ElementOperationMultiError, or nil if none found.
func (m *ElementOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *ElementOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	// no validation rules for OperatedAt

	// no validation rules for OperatedKey

	// no validation rules for Op

	// no validation rules for LastVersion

	// no validation rules for CurrentVersion

	// no validation rules for Remark

	if len(errors) > 0 {
		return ElementOperationMultiError(errors)
	}
	return nil
}

// ElementOperationMultiError is an error wrapping multiple validation errors
// returned by ElementOperation.ValidateAll() if the designated constraints
// aren't met.
type ElementOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ElementOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ElementOperationMultiError) AllErrors() []error { return m }

// ElementOperationValidationError is the validation error returned by
// ElementOperation.Validate if the designated constraints aren't met.
type ElementOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ElementOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ElementOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ElementOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ElementOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ElementOperationValidationError) ErrorName() string { return "ElementOperationValidationError" }

// Error satisfies the builtin error interface
func (e ElementOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sElementOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ElementOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ElementOperationValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceMultiError, or nil
// if none found.
func (m *Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for AgentId

	// no validation rules for ClientIp

	for idx, item := range m.GetWatching() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceValidationError{
						field:  fmt.Sprintf("Watching[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceValidationError{
						field:  fmt.Sprintf("Watching[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceValidationError{
					field:  fmt.Sprintf("Watching[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LastRenewTimestamp

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}
	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.ValidateAll() if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on AgentInstance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentInstance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentInstanceMultiError, or
// nil if none found.
func (m *AgentInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentId

	// no validation rules for Addr

	// no validation rules for Annotations

	if len(errors) > 0 {
		return AgentInstanceMultiError(errors)
	}
	return nil
}

// AgentInstanceMultiError is an error wrapping multiple validation errors
// returned by AgentInstance.ValidateAll() if the designated constraints
// aren't met.
type AgentInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentInstanceMultiError) AllErrors() []error { return m }

// AgentInstanceValidationError is the validation error returned by
// AgentInstance.Validate if the designated constraints aren't met.
type AgentInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentInstanceValidationError) ErrorName() string { return "AgentInstanceValidationError" }

// Error satisfies the builtin error interface
func (e AgentInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentInstanceValidationError{}

// Validate checks the field values on AgentInstanceChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AgentInstanceChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentInstanceChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AgentInstanceChangeMultiError, or nil if none found.
func (m *AgentInstanceChange) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentInstanceChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIns()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AgentInstanceChangeValidationError{
					field:  "Ins",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AgentInstanceChangeValidationError{
					field:  "Ins",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIns()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AgentInstanceChangeValidationError{
				field:  "Ins",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Op

	if len(errors) > 0 {
		return AgentInstanceChangeMultiError(errors)
	}
	return nil
}

// AgentInstanceChangeMultiError is an error wrapping multiple validation
// errors returned by AgentInstanceChange.ValidateAll() if the designated
// constraints aren't met.
type AgentInstanceChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentInstanceChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentInstanceChangeMultiError) AllErrors() []error { return m }

// AgentInstanceChangeValidationError is the validation error returned by
// AgentInstanceChange.Validate if the designated constraints aren't met.
type AgentInstanceChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentInstanceChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentInstanceChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentInstanceChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentInstanceChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentInstanceChangeValidationError) ErrorName() string {
	return "AgentInstanceChangeValidationError"
}

// Error satisfies the builtin error interface
func (e AgentInstanceChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentInstanceChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentInstanceChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentInstanceChangeValidationError{}

// Validate checks the field values on Instance_Watching with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Instance_Watching) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance_Watching with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Instance_WatchingMultiError, or nil if none found.
func (m *Instance_Watching) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance_Watching) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for App

	// no validation rules for Env

	if len(errors) > 0 {
		return Instance_WatchingMultiError(errors)
	}
	return nil
}

// Instance_WatchingMultiError is an error wrapping multiple validation errors
// returned by Instance_Watching.ValidateAll() if the designated constraints
// aren't met.
type Instance_WatchingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Instance_WatchingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Instance_WatchingMultiError) AllErrors() []error { return m }

// Instance_WatchingValidationError is the validation error returned by
// Instance_Watching.Validate if the designated constraints aren't met.
type Instance_WatchingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Instance_WatchingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Instance_WatchingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Instance_WatchingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Instance_WatchingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Instance_WatchingValidationError) ErrorName() string {
	return "Instance_WatchingValidationError"
}

// Error satisfies the builtin error interface
func (e Instance_WatchingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance_Watching.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Instance_WatchingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Instance_WatchingValidationError{}
